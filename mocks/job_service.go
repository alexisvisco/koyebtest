// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	types "github.com/alexisvisco/koyebtests/internal/types"
	mock "github.com/stretchr/testify/mock"
)

// JobService is an autogenerated mock type for the JobService type
type JobService struct {
	mock.Mock
}

type JobService_Expecter struct {
	mock *mock.Mock
}

func (_m *JobService) EXPECT() *JobService_Expecter {
	return &JobService_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *JobService) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JobService_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type JobService_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *JobService_Expecter) Close() *JobService_Close_Call {
	return &JobService_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *JobService_Close_Call) Run(run func()) *JobService_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *JobService_Close_Call) Return(_a0 error) *JobService_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JobService_Close_Call) RunAndReturn(run func() error) *JobService_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateJob provides a mock function with given fields: name, targetURL, isScript
func (_m *JobService) CreateJob(name string, targetURL string, isScript bool) (*types.CreateJobOutput, error) {
	ret := _m.Called(name, targetURL, isScript)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 *types.CreateJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, bool) (*types.CreateJobOutput, error)); ok {
		return rf(name, targetURL, isScript)
	}
	if rf, ok := ret.Get(0).(func(string, string, bool) *types.CreateJobOutput); ok {
		r0 = rf(name, targetURL, isScript)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CreateJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, bool) error); ok {
		r1 = rf(name, targetURL, isScript)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JobService_CreateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJob'
type JobService_CreateJob_Call struct {
	*mock.Call
}

// CreateJob is a helper method to define mock.On call
//   - name string
//   - targetURL string
//   - isScript bool
func (_e *JobService_Expecter) CreateJob(name interface{}, targetURL interface{}, isScript interface{}) *JobService_CreateJob_Call {
	return &JobService_CreateJob_Call{Call: _e.mock.On("CreateJob", name, targetURL, isScript)}
}

func (_c *JobService_CreateJob_Call) Run(run func(name string, targetURL string, isScript bool)) *JobService_CreateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *JobService_CreateJob_Call) Return(_a0 *types.CreateJobOutput, _a1 error) *JobService_CreateJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JobService_CreateJob_Call) RunAndReturn(run func(string, string, bool) (*types.CreateJobOutput, error)) *JobService_CreateJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobPort provides a mock function with given fields: jobID
func (_m *JobService) GetJobPort(jobID string) (int, bool) {
	ret := _m.Called(jobID)

	if len(ret) == 0 {
		panic("no return value specified for GetJobPort")
	}

	var r0 int
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (int, bool)); ok {
		return rf(jobID)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(jobID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(jobID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// JobService_GetJobPort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobPort'
type JobService_GetJobPort_Call struct {
	*mock.Call
}

// GetJobPort is a helper method to define mock.On call
//   - jobID string
func (_e *JobService_Expecter) GetJobPort(jobID interface{}) *JobService_GetJobPort_Call {
	return &JobService_GetJobPort_Call{Call: _e.mock.On("GetJobPort", jobID)}
}

func (_c *JobService_GetJobPort_Call) Run(run func(jobID string)) *JobService_GetJobPort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *JobService_GetJobPort_Call) Return(_a0 int, _a1 bool) *JobService_GetJobPort_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JobService_GetJobPort_Call) RunAndReturn(run func(string) (int, bool)) *JobService_GetJobPort_Call {
	_c.Call.Return(run)
	return _c
}

// PurgeJob provides a mock function with given fields: jobID
func (_m *JobService) PurgeJob(jobID string) error {
	ret := _m.Called(jobID)

	if len(ret) == 0 {
		panic("no return value specified for PurgeJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(jobID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JobService_PurgeJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PurgeJob'
type JobService_PurgeJob_Call struct {
	*mock.Call
}

// PurgeJob is a helper method to define mock.On call
//   - jobID string
func (_e *JobService_Expecter) PurgeJob(jobID interface{}) *JobService_PurgeJob_Call {
	return &JobService_PurgeJob_Call{Call: _e.mock.On("PurgeJob", jobID)}
}

func (_c *JobService_PurgeJob_Call) Run(run func(jobID string)) *JobService_PurgeJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *JobService_PurgeJob_Call) Return(_a0 error) *JobService_PurgeJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JobService_PurgeJob_Call) RunAndReturn(run func(string) error) *JobService_PurgeJob_Call {
	_c.Call.Return(run)
	return _c
}

// NewJobService creates a new instance of JobService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJobService(t interface {
	mock.TestingT
	Cleanup(func())
}) *JobService {
	mock := &JobService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
